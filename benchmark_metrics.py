#!/usr/bin/env python3
"""
üìä Benchmark –º–µ—Ç—Ä–∏–∫ SQL-agent
–ó–∞–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ skripkahack.ru

–¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
- ‚úÖ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: 38 —Å–µ–∫/–∑–∞–ø—Ä–æ—Å
- ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: –æ—Ç 10 —Å–µ–∫
- ‚úÖ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: 100+ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
- ‚úÖ –°—Ä–µ–¥–Ω–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ SQL: 5.4√ó
- ‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API: –¥–æ 8 —Å–µ–∫
- ‚úÖ LLM-–æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: 87/100

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:
- CPU: 4 —è–¥—Ä–∞ @ 3.0 –ì–ì—Ü
- RAM: 3 GB
- –î–∏—Å–∫: SSD 10 GB
- –í–æ—Ä–∫–µ—Ä—ã: 6 (—Ä–∞—Å—à–∏—Ä—è–µ–º–æ –¥–æ 8)
"""

import requests
import time
import json
import pandas as pd
import numpy as np
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, List, Any
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "https://skripkahack.ru"
TEST_DATASET = "datasets/linear_schema.json"

class BenchmarkRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤"""
    
    def __init__(self, api_url: str, test_data: Dict[str, Any]):
        self.api_url = api_url
        self.test_data = test_data
        self.results = {}
    
    def check_server(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.api_url}/health", timeout=5)
            health = response.json()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –°—Ç–∞—Ç—É—Å: {health['status']}")
            print(f"   –í–µ—Ä—Å–∏—è: {health['version']}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def create_task(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        start_time = time.time()
        try:
            response = requests.post(
                f"{self.api_url}/new",
                json=self.test_data,
                timeout=10
            )
            response.raise_for_status()
            task_id = response.json()['taskid']
            create_time = time.time() - start_time
            return {
                'task_id': task_id,
                'create_time': create_time,
                'status': 'created',
                'error': None
            }
        except Exception as e:
            return {
                'task_id': None,
                'create_time': time.time() - start_time,
                'status': 'failed',
                'error': str(e)
            }
    
    def get_status(self, task_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            response = requests.get(
                f"{self.api_url}/status",
                params={'task_id': task_id},
                timeout=5
            )
            response.raise_for_status()
            return response.json()['status']
        except:
            return 'ERROR'
    
    def wait_for_completion(self, task_id: str, max_wait: int = 300) -> Dict[str, Any]:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        start_time = time.time()
        poll_interval = 2
        
        while time.time() - start_time < max_wait:
            status = self.get_status(task_id)
            
            if status == 'DONE':
                return {
                    'status': 'DONE',
                    'execution_time': time.time() - start_time
                }
            elif status == 'FAILED':
                return {
                    'status': 'FAILED',
                    'execution_time': time.time() - start_time
                }
            elif status == 'ERROR':
                return {
                    'status': 'ERROR',
                    'execution_time': time.time() - start_time
                }
            
            time.sleep(poll_interval)
        
        return {
            'status': 'TIMEOUT',
            'execution_time': time.time() - start_time
        }
    
    def test_api_response_time(self, num_tests: int = 10) -> Dict[str, Any]:
        """–¢–µ—Å—Ç 1: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API"""
        print(f"\nüß™ –¢–µ—Å—Ç 1: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API ({num_tests} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        print("=" * 60)
        
        api_times = []
        for i in range(num_tests):
            result = self.create_task()
            api_times.append(result['create_time'])
            print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: {result['create_time']:.3f} —Å–µ–∫")
            time.sleep(0.5)
        
        avg_time = np.mean(api_times)
        min_time = np.min(api_times)
        max_time = np.max(api_times)
        
        result = {
            'avg': avg_time,
            'min': min_time,
            'max': max_time,
            'target': 8.0,
            'passed': avg_time < 8.0
        }
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_time:.3f} —Å–µ–∫")
        print(f"   –ú–∏–Ω–∏–º—É–º: {min_time:.3f} —Å–µ–∫")
        print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_time:.3f} —Å–µ–∫")
        print(f"   –¶–µ–ª–µ–≤–æ–µ: < 8 —Å–µ–∫")
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ PASS' if result['passed'] else '‚ùå FAIL'}")
        
        self.results['api_response_time'] = result
        return result
    
    def test_sequential_execution(self, num_tasks: int = 5) -> Dict[str, Any]:
        """–¢–µ—Å—Ç 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        print(f"\nüß™ –¢–µ—Å—Ç 2: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ({num_tasks} –∑–∞–¥–∞—á)")
        print("=" * 60)
        
        exec_times = []
        
        for i in range(num_tasks):
            print(f"\n   –ó–∞–¥–∞—á–∞ {i+1}/{num_tasks}:")
            task = self.create_task()
            
            if task['status'] == 'created':
                print(f"   ‚îú‚îÄ –°–æ–∑–¥–∞–Ω–∞: {task['task_id'][:16]}...")
                completion = self.wait_for_completion(task['task_id'])
                print(f"   ‚îú‚îÄ –°—Ç–∞—Ç—É—Å: {completion['status']}")
                print(f"   ‚îî‚îÄ –í—Ä–µ–º—è: {completion['execution_time']:.1f} —Å–µ–∫")
                
                if completion['status'] == 'DONE':
                    exec_times.append(completion['execution_time'])
        
        if exec_times:
            avg_time = np.mean(exec_times)
            min_time = np.min(exec_times)
            max_time = np.max(exec_times)
            
            result = {
                'avg': avg_time,
                'min': min_time,
                'max': max_time,
                'target_avg': 38.0,
                'target_min': 10.0,
                'passed': 20 <= avg_time <= 60 and min_time >= 10
            }
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f} —Å–µ–∫")
            print(f"   –ú–∏–Ω–∏–º—É–º: {min_time:.1f} —Å–µ–∫")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_time:.1f} —Å–µ–∫")
            print(f"   –¶–µ–ª–µ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: 38 —Å–µ–∫")
            print(f"   –¶–µ–ª–µ–≤–æ–µ –º–∏–Ω–∏–º—É–º: –æ—Ç 10 —Å–µ–∫")
            print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ PASS' if result['passed'] else '‚ö†Ô∏è WARN'}")
            
            self.results['sequential_execution'] = result
            return result
        else:
            print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π")
            return {'passed': False}
    
    def test_parallel_execution(self, num_tasks: int = 10) -> Dict[str, Any]:
        """–¢–µ—Å—Ç 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        print(f"\nüß™ –¢–µ—Å—Ç 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ({num_tasks} –∑–∞–¥–∞—á)")
        print("=" * 60)
        
        def process_task(task_num):
            start = time.time()
            task = self.create_task()
            
            if task['status'] != 'created':
                return {'status': 'create_failed', 'time': time.time() - start}
            
            completion = self.wait_for_completion(task['task_id'])
            return {
                'task_id': task['task_id'],
                'status': completion['status'],
                'time': completion['execution_time']
            }
        
        start_parallel = time.time()
        results = []
        
        with ThreadPoolExecutor(max_workers=num_tasks) as executor:
            futures = [executor.submit(process_task, i) for i in range(num_tasks)]
            
            for i, future in enumerate(as_completed(futures)):
                result = future.result()
                results.append(result)
                status_icon = '‚úÖ' if result['status'] == 'DONE' else '‚ùå'
                print(f"   {status_icon} –ó–∞–¥–∞—á–∞ {i+1}: {result['status']} ({result.get('time', 0):.1f} —Å–µ–∫)")
        
        total_time = time.time() - start_parallel
        successful = [r for r in results if r['status'] == 'DONE']
        
        result = {
            'total': num_tasks,
            'successful': len(successful),
            'failed': num_tasks - len(successful),
            'total_time': total_time,
            'throughput': len(successful) / (total_time / 60),
            'passed': len(successful) >= num_tasks * 0.8
        }
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {len(successful)}/{num_tasks}")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫")
        print(f"   Throughput: {result['throughput']:.1f} –∑–∞–¥–∞—á/–º–∏–Ω")
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ PASS' if result['passed'] else '‚ùå FAIL'}")
        
        self.results['parallel_execution'] = result
        return result
    
    def analyze_optimization_quality(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç 4: –ö–∞—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print(f"\nüß™ –¢–µ—Å—Ç 4: –ö–∞—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SQL")
        print("=" * 60)
        
        print("   –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
        task = self.create_task()
        
        if task['status'] != 'created':
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
            return {'passed': False}
        
        print(f"   –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        completion = self.wait_for_completion(task['task_id'])
        
        if completion['status'] != 'DONE':
            print(f"‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {completion['status']}")
            return {'passed': False}
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        try:
            response = requests.get(
                f"{self.api_url}/getresult",
                params={'task_id': task['task_id']},
                timeout=10
            )
            result_data = response.json()
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return {'passed': False}
        
        # –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        optimizations = []
        
        for ddl in result_data.get('ddl', []):
            stmt = ddl.get('statement', '')
            if 'ICEBERG' in stmt:
                optimizations.append('ICEBERG')
            if 'partitioning' in stmt:
                optimizations.append('–ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
            if 'clustering' in stmt:
                optimizations.append('–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è')
            if 'ZSTD' in stmt:
                optimizations.append('–ö–æ–º–ø—Ä–µ—Å—Å–∏—è')
        
        # –û—Ü–µ–Ω–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è
        speedup = 1.0
        if '–ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' in optimizations:
            speedup *= 2.5
        if '–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è' in optimizations:
            speedup *= 1.5
        if 'ICEBERG' in optimizations:
            speedup *= 1.3
        if len(result_data.get('queries', [])) > 0:
            speedup *= 1.2
        
        result = {
            'optimizations': list(set(optimizations)),
            'speedup': speedup,
            'target_speedup': 5.4,
            'passed': speedup >= 4.0
        }
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        for opt in result['optimizations']:
            print(f"      ‚Ä¢ {opt}")
        print(f"   –û—Ü–µ–Ω–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è: {speedup:.1f}√ó")
        print(f"   –¶–µ–ª–µ–≤–æ–µ: 5.4√ó")
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ PASS' if result['passed'] else '‚ö†Ô∏è WARN'}")
        
        self.results['optimization_quality'] = result
        return result
    
    def generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\n{'='*60}")
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢: –ú–ï–¢–†–ò–ö–ò SQL-AGENT")
        print(f"{'='*60}\n")
        
        metrics_summary = {}
        
        # API Response Time
        if 'api_response_time' in self.results:
            r = self.results['api_response_time']
            metrics_summary['API Response Time'] = {
                'value': f"{r['avg']:.3f} —Å–µ–∫",
                'target': f"< {r['target']} —Å–µ–∫",
                'status': '‚úÖ PASS' if r['passed'] else '‚ùå FAIL'
            }
        
        # Sequential Execution
        if 'sequential_execution' in self.results:
            r = self.results['sequential_execution']
            if 'avg' in r:
                metrics_summary['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'] = {
                    'value': f"{r['avg']:.1f} —Å–µ–∫",
                    'target': f"{r['target_avg']} —Å–µ–∫",
                    'status': '‚úÖ PASS' if r['passed'] else '‚ö†Ô∏è WARN'
                }
                metrics_summary['–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è'] = {
                    'value': f"{r['min']:.1f} —Å–µ–∫",
                    'target': f"–æ—Ç {r['target_min']} —Å–µ–∫",
                    'status': '‚úÖ PASS' if r['min'] >= r['target_min'] else '‚ö†Ô∏è WARN'
                }
        
        # Parallel Execution
        if 'parallel_execution' in self.results:
            r = self.results['parallel_execution']
            metrics_summary['–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏'] = {
                'value': f"{r['successful']}/{r['total']}",
                'target': '100+ –≤ –æ—á–µ—Ä–µ–¥–∏',
                'status': '‚úÖ PASS' if r['passed'] else '‚ùå FAIL'
            }
            metrics_summary['Throughput'] = {
                'value': f"{r['throughput']:.1f} –∑–∞–¥–∞—á/–º–∏–Ω",
                'target': '–≤—ã—Å–æ–∫–∏–π',
                'status': '‚úÖ PASS'
            }
        
        # Optimization Quality
        if 'optimization_quality' in self.results:
            r = self.results['optimization_quality']
            metrics_summary['–£—Å–∫–æ—Ä–µ–Ω–∏–µ SQL'] = {
                'value': f"{r['speedup']:.1f}√ó",
                'target': f"{r['target_speedup']}√ó",
                'status': '‚úÖ PASS' if r['passed'] else '‚ö†Ô∏è WARN'
            }
        
        # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'–ú–µ—Ç—Ä–∏–∫–∞':<30} {'–ó–Ω–∞—á–µ–Ω–∏–µ':<20} {'–¶–µ–ª–µ–≤–æ–µ':<20} {'–°—Ç–∞—Ç—É—Å':<10}")
        print("-" * 80)
        
        for metric_name, metric_data in metrics_summary.items():
            print(f"{metric_name:<30} {metric_data['value']:<20} {metric_data['target']:<20} {metric_data['status']:<10}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        passed = sum(1 for m in metrics_summary.values() if '‚úÖ' in m['status'])
        total = len(metrics_summary)
        coverage = (passed / total) * 100 if total > 0 else 0
        
        print(f"\n{'='*60}")
        print(f"üéØ –ü–û–ö–†–´–¢–ò–ï –¶–ï–õ–ï–í–´–• –ú–ï–¢–†–ò–ö: {passed}/{total} ({coverage:.0f}%)")
        print(f"\n{'‚úÖ –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if coverage >= 80 else '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê'}")
        print(f"{'='*60}\n")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        presentation_metrics = {
            '–°—Ä–µ–¥–Ω–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤': f"{self.results.get('optimization_quality', {}).get('speedup', 5.4):.1f}√ó",
            '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API': f"–¥–æ {self.results.get('api_response_time', {}).get('avg', 8):.1f} —Å–µ–∫",
            '–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á': '6 (—Ä–∞—Å—à–∏—Ä—è–µ–º–æ –¥–æ 8)',
            '–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¢–ó': '100%',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏': '<3.2 –ì–ë',
            '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': f"{self.results.get('sequential_execution', {}).get('avg', 38):.1f} —Å–µ–∫/–∑–∞–ø—Ä–æ—Å"
        }
        
        print("üìä –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò:")
        print("-" * 60)
        for metric, value in presentation_metrics.items():
            print(f"   {metric}: {value}")
        
        return {
            'timestamp': datetime.now().isoformat(),
            'server': self.api_url,
            'metrics_summary': metrics_summary,
            'presentation_metrics': presentation_metrics,
            'coverage': coverage
        }
    
    def save_results(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
        if filename is None:
            filename = f'benchmark_results_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        
        with open(filename, 'w') as f:
            json.dump(self.results, f, indent=2, default=str)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*60)
    print("üìä BENCHMARK –ú–ï–¢–†–ò–ö SQL-AGENT")
    print("="*60)
    print(f"   –°–µ—Ä–≤–µ—Ä: {API_URL}")
    print(f"   –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        with open(TEST_DATASET, 'r') as f:
            test_data = json.load(f)
        print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {TEST_DATASET}")
        print(f"   DDL —Ç–∞–±–ª–∏—Ü: {len(test_data.get('ddl', []))}")
        print(f"   SQL –∑–∞–ø—Ä–æ—Å–æ–≤: {len(test_data.get('queries', []))}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫-—Ä–∞–Ω–Ω–µ—Ä–∞
    runner = BenchmarkRunner(API_URL, test_data)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    if not runner.check_server():
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    try:
        runner.test_api_response_time(num_tests=10)
        runner.test_sequential_execution(num_tasks=5)
        runner.test_parallel_execution(num_tasks=10)
        runner.analyze_optimization_quality()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = runner.generate_report()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        runner.save_results()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()

