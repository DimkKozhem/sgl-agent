"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º –ë–î (Trino, PostgreSQL, MySQL)
–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º –∏ –∫–æ–ª–æ–Ω–∫–∞–º.
"""

import logging
from typing import Dict, Any
from urllib.parse import urlparse, parse_qs

logger = logging.getLogger(__name__)


class DatabaseConnector:
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ë–î –ø–æ JDBC URL –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """

    def __init__(self, jdbc_url: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        Args:
            jdbc_url: JDBC URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        """
        self.jdbc_url = jdbc_url
        self.connection = None
        self.db_type = self._detect_db_type(jdbc_url)

    def _detect_db_type(self, url: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ JDBC URL.

        Args:
            url: JDBC URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            str: –¢–∏–ø –ë–î (trino, postgresql, mysql, unknown)
        """
        if "trino://" in url or "presto://" in url:
            return "trino"
        elif "postgresql://" in url:
            return "postgresql"
        elif "mysql://" in url:
            return "mysql"
        return "unknown"

    def connect(self) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            if self.db_type == "trino":
                try:
                    import trino
                except ImportError:
                    logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å trino –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install trino")
                    return False

                parsed = self._parse_jdbc_url(self.jdbc_url)
                self.connection = trino.dbapi.connect(
                    host=parsed['host'],
                    port=parsed['port'],
                    user=parsed['user'],
                    catalog=parsed['catalog'],
                    schema=parsed.get('schema', 'default')
                )
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Trino: {parsed['host']}")
                return True

            elif self.db_type == "postgresql":
                try:
                    import psycopg2
                except ImportError:
                    logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psycopg2-binary")
                    return False

                parsed = self._parse_jdbc_url(self.jdbc_url)
                self.connection = psycopg2.connect(
                    host=parsed['host'],
                    port=parsed['port'],
                    user=parsed['user'],
                    password=parsed.get('password', ''),
                    database=parsed['catalog']
                )
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL: {parsed['host']}")
                return True

            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ë–î: {self.db_type}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False

    def _parse_jdbc_url(self, jdbc_url: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç JDBC URL"""
        url = jdbc_url.replace("jdbc:", "")
        parsed = urlparse(url)
        params = parse_qs(parsed.query)

        result = {
            'host': parsed.hostname or 'localhost',
            'port': parsed.port or 8080,
            'catalog': params.get('catalog', [parsed.path.strip('/')])[0] if params.get('catalog') else parsed.path.strip('/'),
            'user': params.get('user', [''])[0],
            'password': params.get('password', [''])[0],
        }

        if 'schema' in params:
            result['schema'] = params['schema'][0]

        return result

    def get_table_stats(self, table_name: str, schema: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–µ"""
        if not self.connection:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return {}

        try:
            cursor = self.connection.cursor()

            full_table = f"{schema}.{table_name}" if schema else table_name

            cursor.execute(f"SELECT COUNT(*) FROM {full_table}")
            row_count = cursor.fetchone()[0]

            if self.db_type == "trino":
                try:
                    cursor.execute(f"""
                        SELECT
                            SUM(compressed_size) as total_size,
                            COUNT(DISTINCT partition_key) as partition_count
                        FROM "{schema}$partitions"
                        WHERE table_name = '{table_name}'
                    """)
                    size_info = cursor.fetchone()
                    total_size = size_info[0] if size_info else 0
                    partition_count = size_info[1] if size_info else 0
                except Exception:
                    total_size = 0
                    partition_count = 0
            else:
                total_size = 0
                partition_count = 0

            cursor.close()

            stats = {
                "row_count": row_count,
                "total_size_bytes": total_size,
                "partition_count": partition_count,
                "avg_row_size": total_size / row_count if row_count > 0 else 0
            }

            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {full_table}: {row_count} —Å—Ç—Ä–æ–∫")
            return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {table_name}: {e}")
            return {}

    def get_column_stats(self, table_name: str, schema: str = None) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º"""
        if not self.connection:
            return {}

        try:
            cursor = self.connection.cursor()
            full_table = f"{schema}.{table_name}" if schema else table_name

            cursor.execute(f"DESCRIBE {full_table}")
            columns = [row[0] for row in cursor.fetchall()]

            stats = {}
            for column in columns:
                try:
                    cursor.execute(f"""
                        SELECT
                            COUNT(DISTINCT {column}) as distinct_count,
                            COUNT(*) - COUNT({column}) as null_count
                        FROM {full_table}
                    """)
                    result = cursor.fetchone()

                    stats[column] = {
                        "distinct_count": result[0],
                        "null_count": result[1],
                        "cardinality": result[0]
                    }
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ {column}: {e}")
                    stats[column] = {
                        "distinct_count": 0,
                        "null_count": 0,
                        "cardinality": 0
                    }

            cursor.close()
            return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
            return {}

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if self.connection:
            try:
                self.connection.close()
                logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
