"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –¥–ª—è SQL-agent.

–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LLM –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤.
"""

import asyncio
from typing import Dict, Optional
from .models import Task, TaskStatus, OptimizationRequest, OptimizationResult
from .llm_analyzer import LLMAnalyzer
from .simple_request_logger import save_task_io  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
import logging

logger = logging.getLogger(__name__)


class SimpleTaskManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ max_workers –∑–∞–¥–∞—á
    —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LLM –∞–Ω–∞–ª–∏–∑–∞.
    """

    def __init__(self, max_workers: int = 4, task_timeout_minutes: int = 20, use_llm: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á.

        Args:
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
            task_timeout_minutes: –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            use_llm: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        self.tasks: Dict[str, Task] = {}
        self.max_workers = max_workers
        self.task_timeout_minutes = task_timeout_minutes
        self._running_tasks = 0
        self.use_llm = use_llm

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        self.llm_analyzer = None
        if self.use_llm:
            try:
                self.llm_analyzer = LLMAnalyzer()
                logger.info("LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {e}")
                self.use_llm = False

    def create_task(self, request: OptimizationRequest) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        task = Task(request=request)
        self.tasks[task.task_id] = task

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏
        asyncio.create_task(self._process_task(task.task_id))

        return task.task_id

    def get_task_status(self, task_id: str) -> Optional[TaskStatus]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        task = self.tasks.get(task_id)
        return task.status if task else None

    def get_task_result(self, task_id: str) -> Optional[OptimizationResult]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏"""
        task = self.tasks.get(task_id)
        if task and task.status == TaskStatus.DONE:
            return task.result
        return None

    def get_task_error(self, task_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –∑–∞–¥–∞—á–∏"""
        task = self.tasks.get(task_id)
        if task and task.status == TaskStatus.FAILED:
            return task.error
        return None

    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á"""
        running_count = sum(1 for task in self.tasks.values() if task.status == TaskStatus.RUNNING)
        completed_count = sum(1 for task in self.tasks.values() if task.status == TaskStatus.DONE)
        failed_count = sum(1 for task in self.tasks.values() if task.status == TaskStatus.FAILED)

        return {
            "total_tasks": len(self.tasks),
            "running_tasks": running_count,
            "completed_tasks": completed_count,
            "failed_tasks": failed_count,
            "max_workers": self.max_workers
        }

    async def _process_task(self, task_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        task = self.tasks.get(task_id)
        if not task:
            return

        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ input –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        input_data = {
            "url": task.request.url,
            "ddl": task.request.ddl,
            "queries": task.request.queries
        }

        try:
            self._running_tasks += 1
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ {task_id} —Å —Ç–∞–π–º–∞—É—Ç–æ–º {self.task_timeout_minutes} –º–∏–Ω—É—Ç")

            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–∞–π–º–∞—É—Ç
            await asyncio.wait_for(
                self._execute_task(task_id),
                timeout=self.task_timeout_minutes * 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
            )

            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if task.result:
                output_data = {
                    "ddl": task.result.ddl,
                    "migrations": task.result.migrations,
                    "queries": task.result.queries,
                    "quality_score": task.result.quality_score
                }
                save_task_io(task_id, input_data, output_data)

        except asyncio.TimeoutError:
            error_msg = f"–ó–∞–¥–∞—á–∞ {task_id} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({self.task_timeout_minutes} –º–∏–Ω—É—Ç)"
            logger.error(error_msg)
            task.status = TaskStatus.FAILED
            task.error = error_msg

            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
            save_task_io(task_id, input_data, error=error_msg)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}"
            logger.error(error_msg)
            task.status = TaskStatus.FAILED
            task.error = error_msg

            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            save_task_io(task_id, input_data, error=error_msg)

        finally:
            self._running_tasks -= 1

    async def _execute_task(self, task_id: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞"""
        task = self.tasks.get(task_id)
        if not task:
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.use_llm and self.llm_analyzer:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
            request_data = {
                "url": task.request.url,
                "ddl": task.request.ddl,
                "queries": task.request.queries
            }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é LLM
            llm_result = self.llm_analyzer.analyze_database(request_data)

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
            result = self._create_result_from_llm(llm_result, task.request)

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å LLM –∞–Ω–∞–ª–∏–∑–æ–º")

        else:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–µ
            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            result = self._create_simple_result(task.request)

        task.result = result
        task.status = TaskStatus.DONE

    def _create_result_from_llm(self, llm_result: dict, request: OptimizationRequest) -> OptimizationResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
            ddl = llm_result.get("ddl", [])
            migrations = llm_result.get("migrations", [])
            queries = llm_result.get("queries", [])

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if not ddl:
                catalog_name = self._extract_catalog_from_url(request.url)
                ddl = [{"statement": f"CREATE SCHEMA IF NOT EXISTS {catalog_name}.optimized_schema"}]

            if not migrations:
                migrations = [{"statement": "-- No migrations needed"}]

            if not queries:
                # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö
                for query_data in request.queries:
                    queries.append({
                        "queryid": query_data["queryid"],
                        "query": f"-- Optimized version of: {query_data['query'][:100]}..."
                    })

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ llm_result._meta
            quality_score = None
            if "_meta" in llm_result:
                quality_score = llm_result["_meta"].get("quality_score")
                if quality_score:
                    logger.info(f"üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ LLM –∞–Ω–∞–ª–∏–∑–∞: {quality_score}/100")

            # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Ç –≤ _meta, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if quality_score is None:
                logger.warning("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö LLM, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50")
                quality_score = 50

            return OptimizationResult(
                ddl=ddl,
                migrations=migrations,
                queries=queries,
                quality_score=quality_score
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ LLM: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            return self._create_simple_result(request)

    def _create_simple_result(self, request: OptimizationRequest) -> OptimizationResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ URL
        catalog_name = self._extract_catalog_from_url(request.url)

        # DDL –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–ª–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ (–ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã)
        ddl = [
            {"statement": f"CREATE SCHEMA {catalog_name}.optimized_schema"},
            {"statement": f"CREATE TABLE {catalog_name}.optimized_schema.optimized_table (id INTEGER, data TEXT)"}
        ]

        # –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
        migrations = [
            {"statement": f"INSERT INTO {catalog_name}.optimized_schema.optimized_table SELECT 1, 'test_data'"}
        ]

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω—ã runquantity –∏–∑ queries —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        queries = []
        for query_data in request.queries:
            queries.append({
                "queryid": query_data["queryid"],
                "query": f"SELECT * FROM {catalog_name}.optimized_schema.optimized_table WHERE id = 1"
            })

        return OptimizationResult(
            ddl=ddl,
            migrations=migrations,
            queries=queries,
            quality_score=30  # –ù–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        )

    def _extract_catalog_from_url(self, url: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ JDBC URL"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ URL
        # –ü—Ä–∏–º–µ—Ä: jdbc://postgresql://localhost:5432/testdb -> testdb
        try:
            # –£–±–∏—Ä–∞–µ–º jdbc:// –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if 'jdbc://' in url:
                url_part = url.replace('jdbc://', '')
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ / –∏–ª–∏ ?
                if '/' in url_part:
                    db_part = url_part.split('/')[-1]
                    if '?' in db_part:
                        db_name = db_part.split('?')[0]
                    else:
                        db_name = db_part
                    return db_name if db_name else "default_catalog"
            return "default_catalog"
        except Exception:
            return "default_catalog"

    def cleanup_old_tasks(self, hours: int = 24):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á"""
        old_tasks = []

        for task_id, task in self.tasks.items():
            if task.status in [TaskStatus.DONE, TaskStatus.FAILED]:
                old_tasks.append(task_id)

        for task_id in old_tasks:
            del self.tasks[task_id]

        if old_tasks:
            logger.info(f"–û—á–∏—â–µ–Ω–æ {len(old_tasks)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á")