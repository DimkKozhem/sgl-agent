#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ API –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
"""

import requests
import json
import time
from typing import Dict, Any

class EnhancedAPIClient:
    def __init__(self, base_url: str = "http://localhost:8001"):
        self.base_url = base_url
    
    def create_task_with_quality_tracking(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        response = requests.post(f"{self.base_url}/new", json=data)
        task_info = response.json()
        task_id = task_info['taskid']
        
        print(f"üöÄ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            status_response = requests.get(f"{self.base_url}/status?task_id={task_id}")
            status = status_response.json()['status']
            
            if status == 'DONE':
                break
            elif status == 'FAILED':
                return {'error': 'Task failed'}
            
            time.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_response = requests.get(f"{self.base_url}/getresult?task_id={task_id}")
        result = result_response.json()
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É
        quality_score = self._estimate_quality_from_result(result)
        
        return {
            'task_id': task_id,
            'result': result,
            'quality_score': quality_score,
            'quality_metrics': {
                'ddl_count': len(result.get('ddl', [])),
                'migrations_count': len(result.get('migrations', [])),
                'queries_count': len(result.get('queries', [])),
                'has_optimizations': len(result.get('ddl', [])) > 0 or len(result.get('migrations', [])) > 0
            }
        }
    
    def _estimate_quality_from_result(self, result: Dict[str, Any]) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        ddl_count = len(result.get('ddl', []))
        migrations_count = len(result.get('migrations', []))
        queries_count = len(result.get('queries', []))
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        score = 5  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
        if ddl_count > 0:
            score += 2
        if migrations_count > 0:
            score += 1
        if queries_count > 0:
            score += 1
        if ddl_count > 2:
            score += 1
        
        return min(score, 10)  # –ú–∞–∫—Å–∏–º—É–º 10
    
    def demonstrate_enhanced_api(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º API"""
        print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –° –û–¶–ï–ù–ö–û–ô –ö–ê–ß–ï–°–¢–í–ê")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "url": "jdbc:trino://test.example.com:8080?catalog=test",
            "ddl": [
                {
                    "statement": "CREATE TABLE test.users (id INTEGER, name VARCHAR(255), email VARCHAR(255), created_at TIMESTAMP)"
                }
            ],
            "queries": [
                {
                    "queryid": "test-query-1",
                    "query": "SELECT * FROM test.users WHERE id = 1",
                    "runquantity": 100,
                    "executiontime": 5
                }
            ]
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
        result = self.create_task_with_quality_tracking(test_data)
        
        if 'error' in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –° –û–¶–ï–ù–ö–û–ô –ö–ê–ß–ï–°–¢–í–ê:")
        print(f"   Task ID: {result['task_id']}")
        print(f"   –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {result['quality_score']}/10")
        print(f"   DDL –∫–æ–º–∞–Ω–¥: {result['quality_metrics']['ddl_count']}")
        print(f"   –ú–∏–≥—Ä–∞—Ü–∏–π: {result['quality_metrics']['migrations_count']}")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {result['quality_metrics']['queries_count']}")
        print(f"   –ï—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {'–î–∞' if result['quality_metrics']['has_optimizations'] else '–ù–µ—Ç'}")
        
        print(f"\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if result['quality_score'] >= 8:
            print("   ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        elif result['quality_score'] >= 6:
            print("   ‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        elif result['quality_score'] >= 4:
            print("   ‚ö†Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        else:
            print("   ‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        return result

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    client = EnhancedAPIClient()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        health_response = requests.get("http://localhost:8001/health")
        if health_response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
            return
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        client.demonstrate_enhanced_api()
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python main.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
