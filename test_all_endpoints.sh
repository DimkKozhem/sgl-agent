#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö endpoints SQL-agent

API_URL="https://skripkahack.ru"

echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• ENDPOINTS"
echo "================================"
echo "–°–µ—Ä–≤–µ—Ä: $API_URL"
echo ""

# 1. GET /health
echo "1Ô∏è‚É£  GET /health"
echo "---"
HEALTH=$(curl -s "$API_URL/health")
STATUS=$(echo "$HEALTH" | jq -r '.status' 2>/dev/null)

if [ "$STATUS" = "healthy" ]; then
    echo "‚úÖ PASS"
    echo "$HEALTH" | jq '{status, version, uptime: .uptime_seconds}'
else
    echo "‚ùå FAIL"
    echo "$HEALTH"
fi
echo ""

# 2. GET /metrics
echo "2Ô∏è‚É£  GET /metrics"
echo "---"
METRICS=$(curl -s "$API_URL/metrics")
UPTIME=$(echo "$METRICS" | jq -r '.uptime_seconds' 2>/dev/null)

if [ -n "$UPTIME" ]; then
    echo "‚úÖ PASS"
    echo "$METRICS" | jq '{uptime, workers: .tasks.max_workers, queue: .queue.max_size, running: .tasks.running}'
else
    echo "‚ùå FAIL"
    echo "$METRICS"
fi
echo ""

# 3. POST /new - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
echo "3Ô∏è‚É£  POST /new"
echo "---"
CREATE_RESPONSE=$(curl -s -X POST "$API_URL/new" \
  -H "Content-Type: application/json" \
  -d @datasets/linear_schema.json)

TASK_ID=$(echo "$CREATE_RESPONSE" | jq -r '.taskid' 2>/dev/null)

if [ -n "$TASK_ID" ] && [ "$TASK_ID" != "null" ]; then
    echo "‚úÖ PASS"
    echo "Task ID: $TASK_ID"
else
    echo "‚ùå FAIL"
    echo "$CREATE_RESPONSE"
    exit 1
fi
echo ""

# 4. GET /status
echo "4Ô∏è‚É£  GET /status?task_id=$TASK_ID"
echo "---"
sleep 1
STATUS_RESPONSE=$(curl -s "$API_URL/status?task_id=$TASK_ID")
TASK_STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status' 2>/dev/null)

if [ -n "$TASK_STATUS" ]; then
    echo "‚úÖ PASS"
    echo "Status: $TASK_STATUS"
else
    echo "‚ùå FAIL"
    echo "$STATUS_RESPONSE"
fi
echo ""

# 5. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ /getresult)
echo "5Ô∏è‚É£  –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏..."
echo "---"
for i in {1..60}; do
    sleep 2
    STATUS_CHECK=$(curl -s "$API_URL/status?task_id=$TASK_ID" | jq -r '.status')
    
    if [ "$STATUS_CHECK" = "DONE" ]; then
        echo "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ $((i*2)) —Å–µ–∫—É–Ω–¥"
        break
    elif [ "$STATUS_CHECK" = "FAILED" ]; then
        echo "‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å"
        break
    fi
    
    echo -n "."
done
echo ""
echo ""

# 6. GET /getresult
echo "6Ô∏è‚É£  GET /getresult?task_id=$TASK_ID"
echo "---"
RESULT=$(curl -s "$API_URL/getresult?task_id=$TASK_ID")
DDL_COUNT=$(echo "$RESULT" | jq -r '.ddl | length' 2>/dev/null)
MIG_COUNT=$(echo "$RESULT" | jq -r '.migrations | length' 2>/dev/null)
QRY_COUNT=$(echo "$RESULT" | jq -r '.queries | length' 2>/dev/null)

if [ -n "$DDL_COUNT" ] && [ "$DDL_COUNT" != "null" ]; then
    echo "‚úÖ PASS"
    echo "DDL: $DDL_COUNT –∫–æ–º–∞–Ω–¥"
    echo "Migrations: $MIG_COUNT –∫–æ–º–∞–Ω–¥"
    echo "Queries: $QRY_COUNT –∑–∞–ø—Ä–æ—Å–æ–≤"
else
    echo "‚ùå FAIL"
    echo "$RESULT" | head -20
fi
echo ""

# 7. GET /static/pipeline.html
echo "7Ô∏è‚É£  GET /static/pipeline.html"
echo "---"
PIPELINE_STATUS=$(curl -I -s "$API_URL/static/pipeline.html" | head -1)

if echo "$PIPELINE_STATUS" | grep -q "200"; then
    SIZE=$(curl -I -s "$API_URL/static/pipeline.html" | grep -i content-length | awk '{print $2}' | tr -d '\r')
    echo "‚úÖ PASS"
    echo "HTTP Status: 200 OK"
    echo "Size: $SIZE –±–∞–π—Ç"
else
    echo "‚ùå FAIL"
    echo "$PIPELINE_STATUS"
fi
echo ""

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo "================================"
echo "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢"
echo "================================"
echo ""
echo "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ endpoints: 7"
echo "–°–µ—Ä–≤–µ—Ä: $API_URL"
echo "Task ID: $TASK_ID"
echo ""
echo "‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç!"

